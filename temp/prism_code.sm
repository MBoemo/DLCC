//Prism model generated automatically by Bellerophon

// Forward walk rate
const double walk_rate = 1;

ctmc

//-----------------------------------------------------

// ONE_1 TRACK (ONE_1T)

// Maximum track length
const int ONE_1_max;

// Intersections
const int y_ONE_1_intersection = ONE_1_max - 1;
const int x_ONE_1_intersection = ONE_1_max - 2;

module ONE_1T

	ONE_1_walk : bool init true;

	// States - where we are on the track
	ONE_1_step : [0..ONE_1_max] init 0;

	// Handle blockage
	[ONE_1_unblocked] ONE_1_walk -> walk_rate : (ONE_1_step'=min(ONE_1_step+1,ONE_1_max));
	[ONE_1_blocked] ((ONE_1_step < y_ONE_1_intersection) & (y_step = y_max)) | ((ONE_1_step < x_ONE_1_intersection) & (x_step = x_max)) 
-> walk_rate : (ONE_1_walk'=false);

endmodule

//-----------------------------------------------------

// Y TRACK (yT)

// Maximum track length
const int y_max;

module yT
	
	// States - where we are on the track
	y_step : [0..y_max] init 0;

	// Walk
	[] true -> walk_rate : (y_step'= min(y_step+1,y_max));

endmodule

//-----------------------------------------------------

// X TRACK (xT)

// Maximum track length
const int x_max;

module xT
	
	// States - where we are on the track
	x_step : [0..x_max] init 0;

	// Walk
	[] true -> walk_rate : (x_step'= min(x_step+1,x_max));

endmodule

