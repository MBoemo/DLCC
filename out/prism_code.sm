//Prism model generated automatically by Bellerophon

// Forward walk rate
const double walk_rate = 1;

ctmc

//-----------------------------------------------------

// ONE_2 TRACK (ONE_2T)

// Maximum track length
const int ONE_2_max;

// Intersections
const int y_ONE_2_intersection = ONE_2_max - 1;
const int z_ONE_2_intersection = ONE_2_max - 2;

module ONE_2T

	ONE_2_walk : bool init true;

	// States - where we are on the track
	ONE_2_step : [0..ONE_2_max] init 0;

	// Handle blockage
	[ONE_2_unblocked] ONE_2_walk -> walk_rate : (ONE_2_step'=min(ONE_2_step+1,ONE_2_max));
	[ONE_2_blocked] ((ONE_2_step < y_ONE_2_intersection) & (y_step = y_max)) | ((ONE_2_step < z_ONE_2_intersection) & (z_step = z_max)) 
-> walk_rate : (ONE_2_walk'=false);

endmodule

//-----------------------------------------------------

// Y TRACK (yT)

// Maximum track length
const int y_max;

module yT
	
	// States - where we are on the track
	y_step : [0..y_max] init 0;

	// Walk
	[] true -> walk_rate : (y_step'= min(y_step+1,y_max));

endmodule

//-----------------------------------------------------

// Z TRACK (zT)

// Maximum track length
const int z_max;

module zT
	
	// States - where we are on the track
	z_step : [0..z_max] init 0;

	// Walk
	[] true -> walk_rate : (z_step'= min(z_step+1,z_max));

endmodule

